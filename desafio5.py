# -*- coding: utf-8 -*-
"""desafio5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17aLvwQ5XM-65mZ41JboyX1OvjagciTvt
"""

import pandas as pd
import numpy as np
import datetime
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

# Importando os dados
df = pd.read_csv('data.csv', encoding='latin1')

# Visualizando os dados
print(df.head())

# Visualizando as informações
df.info()

# Visualizando quantidade de dados nulos
quantidade_nulos_por_coluna = df.isna().sum().sum()
print(f'Quantidade de valores nulos por coluna: {quantidade_nulos_por_coluna}')

# Elimando duplicatas e valores nulos
df = df.dropna()
df = df.drop_duplicates()

# Transformando os dados
df['CustomerID'] = df['CustomerID'].astype('int64')
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])

# Visualizando as informações após as transformações
df.info()

# Procurando valores negativos
print(df.loc[df.Quantity <= 0])
print(df.loc[df.UnitPrice <= 0])

# Removendo os valores negativos
df = df.drop(df[df.Quantity <= 0].index)
df = df.drop(df[df.UnitPrice <= 0].index)

# Procurando outlier
print(df.loc[df.Quantity >= 10000])
print(df.loc[df.UnitPrice <= 5000])

# Removendo outlier
df = df.drop(df[df.Quantity >= 10000].index)
df = df.drop(df[df.UnitPrice >= 5000].index)

# Visualizando as informações após as remoções
df.info()

# Criando coluna TotalPrice
df['TotalPrice'] = df['Quantity'] * df['UnitPrice']

# Fazendo uma descrição os dados
print(df.describe())

# Guardando o valor da ultima data registrada
df['dataMax'] = df['InvoiceDate'].max()

# Criando o dataframe do Top 10 países com maior valor de vendas
df_top_10_Country = df.drop('InvoiceDate', axis=1)
df_top_10_Country = df_top_10_Country.groupby('Country').sum().reset_index()
df_top_10_Country = df_top_10_Country.sort_values(by='TotalPrice', ascending=False)
df_top_10_Country = df_top_10_Country.head(10)

# criando grafico dos 'Top 10 países com maior valor de vendas'
grafico = px.histogram(df_top_10_Country, x= 'Country', y = 'TotalPrice',
                          title = 'Top 10 países com maior valor de vendas',
                          color_discrete_sequence = ['darkorange'],
                          template='simple_white')
grafico.show()

# Criando o dataframe do Top 10 produtos mais vendidos
df_top_10_StockCode = df.drop('InvoiceDate', axis=1)
df_top_10_StockCode = df_top_10_StockCode.groupby('Description').sum().reset_index()
df_top_10_StockCode = df_top_10_StockCode.sort_values(by='TotalPrice', ascending=False)
df_top_10_StockCode = df_top_10_StockCode.head(10)

# criando grafico dos 'Top 10 produtos mais vendidos'
grafico = px.histogram(df_top_10_StockCode, x= 'Description', y = 'TotalPrice',
                          title = 'Top 10 produtos mais vendidos',
                          color_discrete_sequence = ['darkorange'],
                          template='simple_white')
grafico.show()

# Criando uma copia do dataframe para mes
df_date = df.copy()

# Transformando a coluna de data
df_date['InvoiceDate'] = pd.to_datetime(df['InvoiceDate']).dt.month
df_date['InvoiceDate'] = df_date['InvoiceDate'].astype('int64')

# Agropando o dataframe o dataframe por mes
df_month = df_date.groupby('InvoiceDate').sum().reset_index()

# criando grafico dos 'Top 10 produtos mais vendidos'
somaVendas = px.histogram(df_month, x= 'InvoiceDate', y = 'TotalPrice',
                          title = 'Valor de venda total por mês',
                          color_discrete_sequence = ['darkorange'],
                          nbins=12,
                          template='simple_white')
somaVendas.show()

df.info()

dfRFM = df.groupby(['CustomerID', 'InvoiceNo']).sum()
dfRFM = df.groupby('CustomerID').sum()

dfRFM